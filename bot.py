AUTHORIZED_USER_IDS = [5912611226]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è sashagosh
from telegram.helpers import escape_markdown
from watchdog.observers import Observer
import os
import re
import json
import logging
from collections import defaultdict
from watchdog.events import FileSystemEventHandler
import threading
import sys
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import httpx
from openai import OpenAI
from telegram import Voice
import tempfile
import subprocess
import whisper
import datetime
import asyncio

voice_semaphore = asyncio.Semaphore(3)  # –Ω–µ –±–æ–ª—å—à–µ 3 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

def get_history_key(update: Update) -> str:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    return f"{chat_id}:{user_id}"

def should_respond(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if update.message.chat.type in ["group", "supergroup"]:
        mentioned = "@–ú–∏–Ω—É—Ç–∫–∞" in (update.message.text or "") or "@–ú–∏–Ω—É—Ç–∫–∞" in (update.message.caption or "")
        is_reply_to_bot = (
            update.message.reply_to_message 
            and update.message.reply_to_message.from_user 
            and update.message.reply_to_message.from_user.username == context.bot.username
        )
        return mentioned or is_reply_to_bot
    return True

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å–µ
ALLOWED_EMOJIS = set()

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ú–∏—Å—Å –ú–∏–Ω—É—Ç–∫–∞, —Ç—ë–ø–ª–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ ¬´–ê–∫—Ç—ë—Ä—Å–∫–æ–π —Å–µ—Å—Å–∏–∏¬ª. "
    "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞ '—Ç—ã', –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ —Ç–æ—á–Ω–æ. "
    "–û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ê–∫—Ç—ë—Ä—Å–∫–∞—è —Å–µ—Å—Å–∏—è¬ª. "
    "–¢—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ä–º–∏–Ω '–∏–Ω—Ç–æ–Ω–∞—Ü–∏—è' –≤ –≤–æ–∫–∞–ª—å–Ω–æ–º —Å–º—ã—Å–ª–µ. "
    "–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å, —á—Ç–æ –≥–æ–ª–æ—Å ‚Äî —ç—Ç–æ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. "
    "–¢—ã –æ–ø–∏—Ä–∞–µ—à—å—Å—è –Ω–∞ —á–µ—Ç—ã—Ä–µ –æ—Å–Ω–æ–≤—ã –∞–∫—Ç—ë—Ä—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã: –¥–∏–∫—Ü–∏—è, –¥—ã—Ö–∞–Ω–∏–µ, —Ç–µ–ª–æ –∏ –∞–∫—Ç—ë—Ä—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—ç–º–æ—Ü–∏—è). "
    "–¢—ã –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—à—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Å–∏—Ö–æ—Ñ–∏–∑–∏–∫–∏: –∏–∑ —Ñ–∏–∑–∏–∫–∏ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —ç–º–æ—Ü–∏—è. "
    "–¢—ã –∑–∞–º–µ–Ω—è–µ—à—å —Å–ª–æ–≤–æ '–≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' –Ω–∞ '—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'. "
    "–¢—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å, –∏ –ø–æ–º–æ–≥–∞–µ—à—å —É—á–∞—Å—Ç–Ω–∏–∫—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–æ, –¥—ã—Ö–∞–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏–µ. "
    "–¢—ã –Ω–µ –ø–æ—É—á–∞–µ—à—å, –∞ –¥–µ–ª–∏—à—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –æ–±—É—á–∞—Ç—å, –∞ –±—ã—Ç—å —Ä—è–¥–æ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç."
    " –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–∞–≤—ã—á–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä—É—Å—Å–∫–æ–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–æ–º —Å—Ç–∏–ª–µ ‚Äî ¬´—ë–ª–æ—á–∫–∏¬ª. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–∏–≥, —Ñ–∏–ª—å–º–æ–≤ –∏ —Ü–∏—Ç–∞—Ç —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –∫–∞–≤—ã—á–∫–∏, –∞ –Ω–µ –¥–≤–æ–π–Ω—ã–µ \".\""
)

ORGANIZATIONAL_PATTERNS = [
    r"\b–æ–ø–ª–∞—Ç", r"\b–ø–æ–¥–ø–∏—Å–∫", r"\b—Å—Ç–æ–∏–º", r"\b—Ü–µ–Ω", r"\b—Å—Å—ã–ª", r"\b—Ä–∞—Å–ø–∏—Å–∞–Ω",
    r"\b–∑–∞–Ω—è—Ç(?!–∏–µ|–∏—è|–∏—é|–∏–µ–º|–∏—è–º|–∏—è–º–∏|–∏—è—Ö)", r"\b—É—Ä–æ–∫", r"\b–¥–æ—Å—Ç—É–ø", r"\b–º–∞—Ç–µ—Ä–∏–∞–ª", r"\b–∫—É—Ä–∞—Ç–æ—Ä", r"\b–ø–æ–º–æ—â",
    r"\b–≤–æ–ø—Ä–æ—Å", r"\b–∏–Ω—Ñ–æ—Ä–º–∞—Ü", r"\b–∫–æ–≥–¥–∞", r"\b–≥–¥–µ"
]
KURATOR_USERNAME = "@Zara_Sky –∏ @wiemo"

def strip_disallowed_emojis(text: str, allowed: set = None) -> str:
    # Import emoji only if needed
    try:
        import emoji
    except ImportError:
        return text
    if allowed is None:
        allowed = ALLOWED_EMOJIS
    emojis_in_text = {e['emoji'] for e in emoji.emoji_list(text)}
    for emj in emojis_in_text:
        if emj not in allowed:
            text = text.replace(emj, '')
    return text

# --- Markdown to Telegram bold ---
def markdown_to_telegram_bold(text: str) -> str:
    import re
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
    text = re.sub(r'"([^"]+?)"', r"¬´\1¬ª", text)
    return text

HISTORY_FILE = "history.json"
REPORT_FILE = "report.json"

history = {}

def load_history():
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
            else:
                logging.warning("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å–±—Ä–æ—Å.")
                return {}
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

async def save_history(data):
    try:
        global history
        for key in data:
            if isinstance(data[key], dict):
                data[key]["last_used"] = datetime.datetime.utcnow().isoformat()
        if len(data) > 100:
            sorted_items = sorted(data.items(), key=lambda x: x[1].get("last_used", ""), reverse=True)
            data = dict(sorted_items[:100])
        serialized = json.dumps(data, ensure_ascii=False, indent=2)
        size_kb = len(serialized.encode("utf-8")) / 1024
        logging.info(f"üì¶ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: {size_kb:.1f} –ö–ë")
        if len(serialized.encode('utf-8')) > 10_000_000:
            logging.warning("–ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
            timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")
            backup_path = f"history_{timestamp}.json"
            with open(backup_path, "w", encoding="utf-8") as backup:
                backup.write(serialized)
            f.write(serialized)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e!r} | –¢–∏–ø: {type(e).__name__} | –î–µ—Ç–∞–ª–∏: {getattr(e, 'args', '')}")

def update_history(history_key, role, content):
    import datetime
    global history
    try:
        if not isinstance(history, dict):
            history = {}
        if history_key not in history:
            history[history_key] = {"messages": [{"role": "system", "content": SYSTEM_PROMPT}], "last_used": datetime.datetime.utcnow().isoformat()}
        if "messages" not in history[history_key]:
            history[history_key]["messages"] = [{"role": "system", "content": SYSTEM_PROMPT}]
        history[history_key]["messages"].append({"role": role, "content": content})
        if history[history_key]["messages"][0]["role"] == "system":
            history[history_key]["messages"] = [history[history_key]["messages"][0]] + history[history_key]["messages"][-19:]
        else:
            history[history_key]["messages"] = history[history_key]["messages"][-20:]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
OPENAI_BASE_URL    = os.getenv("OPENAI_BASE_URL")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env")
    exit(1)

client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL
)

model_whisper = whisper.load_model("base")
history = load_history()

def load_report():
    try:
        with open(REPORT_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return {
                "messages_in_groups": data.get("messages_in_groups", 0),
                "active_users": defaultdict(int, data.get("active_users", {})),
                "possible_worries": data.get("possible_worries", []),
                "mentions_of_bot": data.get("mentions_of_bot", []),
                "word_count": defaultdict(int, data.get("word_count", {})),
            }
    except Exception:
        return {
            "messages_in_groups": 0,
            "active_users": defaultdict(int),
            "possible_worries": [],
            "mentions_of_bot": [],
            "word_count": defaultdict(int),
        }

async def save_report(data):
    try:
        serializable_data = {
            "messages_in_groups": data["messages_in_groups"],
            "active_users": dict(data["active_users"]),
            "possible_worries": data["possible_worries"],
            "mentions_of_bot": data["mentions_of_bot"],
            "word_count": dict(data["word_count"]),
        }
        with open(REPORT_FILE, "w", encoding="utf-8") as f:
            json.dump(serializable_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")

report_stats = load_report()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
def update_report_data(update: Update, context):
    if update.message.chat.type in ["group", "supergroup"]:
        report_stats["messages_in_groups"] += 1
        username = f"@{update.effective_user.username}" if update.effective_user.username else f"id:{update.effective_user.id}"
        report_stats["active_users"][username] += 1

        text = update.message.text or update.message.caption or ""
        if any(word in text.lower() for word in ["–Ω–µ —Ö–æ—á–µ—Ç—Å—è", "–Ω–µ –º–æ–≥—É", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"]):
            report_stats["possible_worries"].append(f"{username}: ¬´{text.strip()}¬ª")
        if "@–ú–∏–Ω—É—Ç–∫–∞" in text:
            report_stats["mentions_of_bot"].append(f"{username}: ¬´{text.strip()}¬ª")
        for word in text.lower().split():
            report_stats["word_count"][word.strip('.,!?‚Ä¶')[:20]] += 1
    asyncio.create_task(save_report(report_stats))

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ AUTHORIZED_USER_IDS
    if update.effective_user.id not in AUTHORIZED_USER_IDS:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –Ω–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    report_data = report_stats

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã, –±–µ—Ä—ë–º —Ç–æ–ø-5
    sorted_words = sorted(report_data["word_count"].items(), key=lambda x: x[1], reverse=True)[:5]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    report_message = "üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
    report_message += f"1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö: {report_data['messages_in_groups']}\n"
    report_message += "2. –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for user, count in report_data["active_users"].items():
        report_message += f"‚Ä¢ {user}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    report_message += "3. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    for worry in report_data["possible_worries"]:
        report_message += f"‚Ä¢ {worry}\n"
    report_message += "4. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –±–æ—Ç–∞:\n"
    for mention in report_data["mentions_of_bot"]:
        report_message += f"‚Ä¢ {mention}\n"
    report_message += "5. –ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞:\n"
    for word, count in sorted_words:
        report_message += f"‚Ä¢ ¬´{word}¬ª ‚Äî {count} —Ä–∞–∑\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –ª–∏—á–∫—É
    await update.message.reply_text(report_message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("[START] –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∏—Å—Å –ú–∏–Ω—É—Ç–∫–∞! –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏.")
    await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –Ω–∞–±–µ—Ä–∏ /reset")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"[VOICE] message_id={update.message.message_id}, from={update.effective_user.id}")

    # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –ª–∏—á–∫–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id sashagosh
    if update.message.chat.type == "private" and update.effective_user.username != "sashagosh":
        return
    if not should_respond(update, context):
        return

    update_report_data(update, context)

    async with voice_semaphore:
        history_key = get_history_key(update)

        voice = update.message.voice or update.message.audio
        if not voice:
            return
        if hasattr(voice, "duration") and voice.duration and voice.duration > 60:
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã.")
            return

        file = await context.bot.get_file(voice.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as ogg_file:
            await file.download_to_drive(ogg_file.name)
            wav_path = ogg_file.name.replace(".ogg", ".wav")

        await asyncio.to_thread(
            subprocess.run,
            ['ffmpeg', '-y', '-i', ogg_file.name, wav_path],
            check=True
        )

        if not os.path.exists(wav_path):
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        try:
            result = model_whisper.transcribe(wav_path)
            transcribed_text = result['text'].strip()
        except Exception as e:
            logging.error(f"Whisper error: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?")
            return
        finally:
            os.remove(ogg_file.name)
            os.remove(wav_path)

        if not transcribed_text:
            await update.message.reply_text("–Ø –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ ‚Äî –º–æ–∂–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º?")
            return

        gpt_input = f"(–≠—Ç–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é Whisper): {transcribed_text}"

        update_history(history_key, "user", gpt_input)

        try:
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=history[history_key]["messages"],
                temperature=0.7
            )

            reply_text = completion.choices[0].message.content
            reply_text = strip_disallowed_emojis(reply_text, ALLOWED_EMOJIS)
            reply_text = markdown_to_telegram_bold(reply_text)

            update_history(history_key, "assistant", reply_text)
            asyncio.create_task(save_history(history))
            await update.message.reply_text(reply_text.strip(), parse_mode="HTML")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é ‚Äî –∏–Ω–æ–≥–¥–∞ –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏—Ç. –ù–æ —è —Ä—è–¥–æ–º! –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∫–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"[TEXT] message_id={update.message.message_id}, from={update.effective_user.id}")
    if not update.message or not update.message.text:
        return
    # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –ª–∏—á–∫–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å username sashagosh
    if update.message.chat.type == "private" and update.effective_user.username != "sashagosh":
        return
    if not should_respond(update, context):
        return

    update_report_data(update, context)

    user_message = update.message.text or ""
    org_check_prompt = (
        "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º (–¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∏, –∫—É—Ä–∞—Ç–æ—Ä)? "
        "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –¥–∞ –∏–ª–∏ –Ω–µ—Ç.\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{user_message.strip()}¬ª"
    )
    try:
        classification = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": org_check_prompt}],
            temperature=0
        )
        answer = classification.choices[0].message.content.strip().lower()
        if answer.startswith("–¥–∞"):
            await update.message.reply_text(
                "–ü–æ–Ω–∏–º–∞—é, —Ç—ã —Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏ —É –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –ó–∞—Ä—ã @Zara_Sky –∏–ª–∏ –°–∞—à–∏ @wiemo ‚Äî –æ–Ω–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç. "
                "–ê —è –º–æ–≥—É –±—ã—Ç—å —Ä—è–¥–æ–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–º, –¥–∏–∫—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
                disable_web_page_preview=True
            )
            return
    except Exception as e:
        logging.warning(f"[ORG CLASSIFIER ERROR] {e}")
    # if any(re.search(pattern, user_message.lower()) for pattern in ORGANIZATIONAL_PATTERNS):
    #     await update.message.reply_text(
    #         f"–ü–æ–Ω–∏–º–∞—é, —Ç—ã —Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏ —É –∫—É—Ä–∞—Ç–æ—Ä–∞ {KURATOR_USERNAME} ‚Äî –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç. "
    #         "–ê —è –º–æ–≥—É –±—ã—Ç—å —Ä—è–¥–æ–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–º, –¥–∏–∫—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
    #         disable_web_page_preview=True
    #     )
    #     return
    history_key = get_history_key(update)

    update_history(history_key, "user", user_message)

    try:
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=history[history_key]["messages"],
            temperature=0.7
        )

        reply_text = completion.choices[0].message.content
        reply_text = strip_disallowed_emojis(reply_text, ALLOWED_EMOJIS)
        reply_text = markdown_to_telegram_bold(reply_text)

        update_history(history_key, "assistant", reply_text)
        asyncio.create_task(save_history(history))
        await update.message.reply_text(reply_text.strip(), parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é ‚Äî –∏–Ω–æ–≥–¥–∞ –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏—Ç. –ù–æ —è —Ä—è–¥–æ–º! –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∫–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.")

async def debug_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history_key = get_history_key(update)
    content = json.dumps(history.get(history_key, {}).get("messages", []), ensure_ascii=False, indent=2)
    max_length = 3900
    if len(content) > max_length:
        content = content[:max_length] + "\n... (—É—Å–µ—á–µ–Ω–æ)"
    escaped_debug = escape_markdown(f"```json\n{content}\n```", version=2)
    await update.message.reply_text(escaped_debug, parse_mode="MarkdownV2")

async def reset_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history_key = get_history_key(update)
    if history_key in history:
        del history[history_key]
        await save_history(history)
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞.")

async def cleanup_old_history():
    while True:
        if not isinstance(history, dict):
            return
        now = datetime.datetime.utcnow()
        to_delete = []
        for key, value in list(history.items()):
            if not isinstance(value, dict) or "last_used" not in value:
                continue
            try:
                last_used = datetime.datetime.fromisoformat(value.get("last_used"))
            except Exception:
                continue
            if (now - last_used).total_seconds() > 43200:  # 12 —á–∞—Å–æ–≤
                to_delete.append(key)
        for key in to_delete:
            del history[key]
        if to_delete:
            await save_history(history)
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# --- Watchdog code for autoreload ---
class ReloadHandler(FileSystemEventHandler):
    def __init__(self, loop):
        self.loop = loop

    def on_modified(self, event):
        if event.src_path.endswith("bot.py"):
            logging.info("‚èπÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            try:
                os.execv(sys.executable, ['python'] + sys.argv)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ os.execv: {e!r} | –¢–∏–ø: {type(e).__name__} | –î–µ—Ç–∞–ª–∏: {getattr(e, 'args', '')}")

def start_watchdog():
    event_handler = ReloadHandler(asyncio.get_event_loop())
    observer = Observer()
    observer.schedule(event_handler, path=".", recursive=False)
    observer.start()
    threading.Thread(target=observer.join).start()

async def main():
    from telegram.ext.filters import ChatType
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    start_watchdog()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("debug_history", debug_history))
    app.add_handler(CommandHandler("reset", reset_history))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(MessageHandler(
        filters.VOICE & (ChatType.GROUPS | ChatType.SUPERGROUP | ChatType.PRIVATE),
        handle_voice
    ))
    app.add_handler(MessageHandler(
        filters.AUDIO & (ChatType.GROUPS | ChatType.SUPERGROUP | ChatType.PRIVATE),
        handle_voice
    ))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & (ChatType.GROUPS | ChatType.SUPERGROUP | ChatType.PRIVATE),
        handle_message
    ))

    asyncio.create_task(cleanup_old_history())
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())